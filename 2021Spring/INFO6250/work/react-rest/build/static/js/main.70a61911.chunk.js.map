{"version":3,"sources":["Error.jsx","DisplayList.jsx","DisplayButton.jsx","spinner.gif","FactsList.jsx","servers.js","FactCount.jsx","Dropdown.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Error","error","className","DisplayList","start","size","facts","loc_start","loc_end","length","formattedFacts","slice","map","fact","data-index","indexOf","DisplayButton","startPage","setstartPage","maxLength","totalPage","parseInt","currPage","Number","isInteger","onClick","disabled","FactsList","setcountFacts","useState","locFacts","setlocFacts","isLoading","setLoading","errorMessage","seterrorMessage","useEffect","fetch","method","catch","Promise","reject","then","response","ok","json","err","src","logo","alt","FactCount","count","Dropdown","setListSize","onChange","e","target","value","App","showFacts","setShowFacts","Size","setSize","countFacts","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70a61911.chunk.js","sourcesContent":["export const Error = ({error})=>{\n\n    const errMsgs = { // translate error codes to human-friendly messages\n        'network-error': 'There was a problem connecting to the network, try again',\n        'empty-data':'no facts in our database'\n        };\n\n    return (\n        <div className=\"error_message\">{errMsgs[error]}</div>\n    )\n}","import { Error } from \"./Error\";\n\n\nexport const DisplayList = ({start,size,facts,error}) =>{\n    let loc_start = start\n    let loc_end = start+size\n    if(loc_end > facts.length){\n        loc_end = facts.length\n    }\n    const formattedFacts = facts.slice(loc_start,loc_end).map(fact => \n            (<li key= {facts.indexOf(fact)} data-index={facts.indexOf(fact)}>Fact No.{facts.indexOf(fact)+1}<br/>{fact}</li>)\n    );\n\n    // console.log(error)\n    if (!error&&facts.length === 0){\n        error  = 'empty-data'\n    }\n    return (\n        <div>\n            {facts.length?\n            <div>\n                <div className=\"fact_number\">Showing Facts: {loc_start+1}-{loc_end}</div>\n                <ul className = \"facts\">{formattedFacts}</ul>\n            </div>\n            : \n            <Error error={error}/>}\n        </div>\n    )\n}","export const DisplayButton = ({startPage,setstartPage,maxLength,facts,length}) =>{\n    function pageDown (){\n        setstartPage(startPage-maxLength)\n      }\n      function pageUp(){\n        setstartPage(startPage+maxLength)\n    }\n\n    const totalPage = parseInt(facts.length/maxLength)+ (facts%maxLength? 0:1)\n    \n    const currPage = (Number.isInteger(startPage/maxLength)? startPage/maxLength :startPage/maxLength+0.5)+1\n\n    // console.log(startPage,maxLength,currPage)\n    return (\n        <div className = \"display_button\">\n            {facts.length? \n            <div>\n                <button onClick = {pageDown} disabled={!(startPage>0)}>&lt; Previous</button>\n                <span className=\"page_number\">{currPage}/{totalPage}</span>\n                <button onClick = {pageUp} disabled ={((startPage+maxLength)>=length)}>Next &gt;</button>\n            </div> : null\n            }\n        </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/spinner.42f7144f.gif\";","import { useState,useEffect } from \"react\";\nimport {Fetchcatlist} from \"./servers\";\nimport { DisplayList } from \"./DisplayList\";\nimport { DisplayButton } from \"./DisplayButton\";\nimport logo from './spinner.gif'\n\nexport const FactsList = ({setcountFacts,maxLength}) =>{\n\n    const [locFacts,setlocFacts] = useState([])\n    const [isLoading, setLoading] = useState(false)\n    const [startPage, setstartPage] = useState(0)\n    const [errorMessage,seterrorMessage] = useState('')\n\n    useEffect( () =>{\n        setLoading(true)\n        Fetchcatlist()\n        .then((facts)=>{\n          setLoading(false)\n          setlocFacts(facts)\n          setcountFacts(facts.length)\n        })\n        .catch((err)=>{\n          setLoading(false)\n          seterrorMessage(err.error)\n        })\n      },[setcountFacts]);\n\n      // const pageCount = parseInt(locFacts.length/maxLength) + (locFacts.length%maxLength?1:0)\n      return (\n          <div>\n            {isLoading ? \n              <div className=\"loading\">\n                <div>Loading data...</div>\n                <div><img src={logo} alt=\"loading...\" /></div>\n              </div>\n              : \n              <div>\n                <DisplayList size={maxLength} facts = {locFacts} start = {startPage <0? 0:startPage} length = {locFacts.length} error={errorMessage}/>\n                <DisplayButton startPage = {startPage <0? 0:startPage} maxLength={maxLength} setstartPage={setstartPage} facts = {locFacts} length = {locFacts.length}/>\n              </div>\n            }\n          </div>\n      )\n\n}","export const  Fetchcatlist = () =>{\n    \n    return fetch('/catfacts',  {\n        method: 'GET',\n    })\n    .catch( () => Promise.reject({ error: 'network-error'} ) )\n    .then( response => {\n        if(response.ok) {\n          return response.json();\n        }\n        return response.json().then( json => Promise.reject(json) );\n      })\n}","export const FactCount = ({count}) =>{\n    return (\n        <div className = 'fact_count'>\n            {count} facts loaded\n        </div>\n    )\n}","export const Dropdown = ({setListSize})=>{\n    return (\n        <div className=\"dropdown\">\n            <label>Facts per page:</label>\n            <select onChange={(e)=>{setListSize(e.target.value)}}>\n                <option value='5'>5</option>\n                <option value='10'>10</option>\n            </select>\n        </div>\n    )    \n}\n\n","import {useState} from 'react'\nimport {FactsList} from \"./FactsList\";\nimport {FactCount} from \"./FactCount\";\nimport { Dropdown} from \"./Dropdown\";\nimport './App.css'\n\n\nfunction App() {\n\n  const [showFacts, setShowFacts] = useState(false)\n  const [Size, setSize] = useState(\"5\")\n  const [countFacts,setcountFacts] = useState(0)\n\n  return (\n    <div className=\"App\">\n      <FactCount count = {countFacts}/>\n      <Dropdown setListSize={setSize}/>\n      <hr />\n      {showFacts? \n        <div>\n          <FactsList setcountFacts = {setcountFacts} maxLength = {parseInt(Size)}/>\n          {/* <button onClick = {()=>{setFacts([]);setShowFacts(false)}}>Reset</button> */}\n        </div>\n        : \n        <div>\n          <button onClick={()=>setShowFacts(true)}>Load Facts</button>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}